# -------------------------------------------------------------------
# This is the default mkgmap style file for applying rules on
# OSM relations.  Usually you will set tags on the
# elements that make up the relation, and the tags will be
# processed by the rules defined in the "points" or "lines" files.
#
# Any line prefaced with # is a comment and will not be applied.
# Each line is a rule, of the generalised format:
#  OSM_tag(s)_to_match  [Garmin_type_code resolution]
# See http://wiki.openstreetmap.org/wiki/Mkgmap/help/style_rules
# and http://wiki.openstreetmap.org/wiki/Mkgmap/help/Custom_styles
# for more information.

# Names of administrative boundaries.
# We could want to sort the relations in ascending order of admin_level
# and alphabetically by name first.
# Currently, the matching relations will be processed and the names
# appended to the boundary lines in an arbitrary order.
(type=boundary | type=multipolygon) & boundary=administrative & name=*
{ apply
  {
    set mkgmap:boundary_name='$(mkgmap:boundary_name)/${name}' | '${name}';
  }
}

# European E-Road network
route=road & network=e-road { apply { add int_ref='${ref'; add int_ref='${int_ref'}; add network=e-road }

# Public transportation routes.
# We could want to sort the matching relations by ref first.
type=route
& (route=bus|route=trolleybus|route=ferry|route=subway|route=train|route=tram)
& (ref=* | name=*)
{
  add ref='${name}'; # if ref is missing, use name
  # Append the ref of the route relation to the route_ref attribute of
  # the member nodes recursively (even to members of subrelations).
  # Stops can be grouped within subrelations comprising the vehicle
  # stop node and the passenger wait node.
  apply { # node role ~ '(start_|end_)stop'
    set route_ref='$(route_ref),${ref}' | '${ref}';

    # In route relations, stops may be defined as relations that group
    # the passenger wait area and the vehicle stop area.  If such
    # subrelations exist, copy the ref to them too.
    set mkgmap:ref='${ref}';

    apply role=passengers {
      set route_ref='$(route_ref),${mkgmap:ref}' | '${mkgmap:ref}';
    }

    delete mkgmap:ref;
  }
  # We could want to copy the route relation name to unnamed route=ferry ways.
  # apply way { add name='${name}' }
}

#----------------------------
# Hiking Trails
#ifdef POPOTRAILS

# Standard Wanderweg
# CH: yellow::yellow_diamond
type=route & (route=foot|route=hiking) {
	apply {set route=hiking;}
}

# CH - Bergwanderweg
type=route & (route=foot|route=hiking) & osmc:symbol='red:white:red_bar' {
	apply {set route_red=yes;}
}

# CH - Alpiner Weg
type=route & (route=foot|route=hiking) & osmc:symbol='blue:white:blue_bar' {
	apply {set route_blue=yes;}
}

# Fahrradwege
type=route & (route=mtb|route=bicycle) {
    apply {set route=bicycle;}
}

#endif
# -----------------------------------------

# Relations-Style for the bicyclepath network as additional 
# transparent layer.

# Added by schweigi
#
# Bicycle

network=icn {
	apply {
		set route_icn='$(route_icn), ${name} (${ref})' | 
		     '$(route_icn), ${name}' | 
		     '$(route_icn), ${ref}' | '${name} (${ref})'  | 
		     '${name}' | '${ref}'
	}
}



network=ncn {
	apply {
		set route_ncn='$(route_ncn), ${name} (${ref})' | 
		     '$(route_ncn), ${name}' | 
		     '$(route_ncn), ${ref}' | '${name} (${ref})'  | 
		     '${name}' | '${ref}'
	}
}



network=rcn {
	apply {
		set route_rcn='$(route_rcn), ${name} (${ref})' | 
		     '$(route_rcn), ${name}' | 
		     '$(route_rcn), ${ref}' | '${name} (${ref})'  | 
		     '${name}' | '${ref}' | 'Regionaler Radweg'
	}
}


network=lcn {
	apply {
		set route_lcn='$(route_lcn), ${name} (${ref})' | 
		     '$(route_lcn), ${name}' | 
		     '$(route_lcn), ${ref}' | '${name} (${ref})'  | 
		     '${name}' | '${ref}' | 'Lokaler Radweg'
	}
}

network=tcn {
        apply {
                set route_tcn='$(route_tcn), ${name} (${ref})' |
                     '$(route_tcn), ${name}' |
                     '$(route_tcn), ${ref}' | '${name} (${ref})'  |
                     '${name}' | '${ref}'
        }
}

# Hiking

# Relation-File for the Wanderwege layer.

(route=foot | route=hiking) & 
	(osmc:symbol=blue | osmc:symbol ~ 'blue:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_blue='$(route_blue):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_blue_type='${network}';
	        set route_blue_name=
	            '$(route_blue_name), ${osmc:name} (${distance})' |
	            '$(route_blue_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_blue_name), ${name} (${distance})' |
	            '$(route_blue_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=yellow | osmc:symbol ~ 'yellow:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_yellow='$(route_yellow):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_yellow_type='${network}';
	        set route_yellow_name=
	            '$(route_yellow_name), ${osmc:name} (${distance})' |
	            '$(route_yellow_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_yellow_name), ${name} (${distance})' |
	            '$(route_yellow_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=green | osmc:symbol ~ 'green:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_green='$(route_green):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_green_type='${network}';
	        set route_green_name=
	            '$(route_green_name), ${osmc:name} (${distance})' |
	            '$(route_green_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_green_name), ${name} (${distance})' |
	            '$(route_green_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=red | osmc:symbol ~ 'red:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_red='$(route_red):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_red_type='${network}';
	        set route_red_name=
	            '$(route_red_name), ${osmc:name} (${distance})' |
	            '$(route_red_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_red_name), ${name} (${distance})' |
	            '$(route_red_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=black | osmc:symbol ~ 'black:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_black='$(route_black):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_black_type='${network}';
	        set route_black_name=
	            '$(route_black_name), ${osmc:name} (${distance})' |
	            '$(route_black_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_black_name), ${name} (${distance})' |
	            '$(route_black_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=orange | osmc:symbol ~ 'orange:.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_orange='$(route_orange):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_orange_type='${network}';
	        set route_orange_name=
	            '$(route_orange_name), ${osmc:name} (${distance})' |
	            '$(route_orange_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_orange_name), ${name} (${distance})' |
	            '$(route_orange_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}

(route=foot | route=hiking) & 
	(osmc:symbol=white | osmc:symbol ~ 'white:.*' | osmc:symbol ~ ':.*') &
	(network=iwn | network=nwn | network=rwn | network=lwn) {
	apply { set route_white='$(route_white):${osmc:symbol}'|
	                         '${osmc:symbol}';
	        set route_white_type='${network}';
	        set route_white_name=
	            '$(route_white_name), ${osmc:name} (${distance})' |
	            '$(route_white_name), ${osmc:name}' |
	            '${osmc:name} (${distance})' | '${osmc:name}' |
	            '$(route_white_name), ${name} (${distance})' |
	            '$(route_white_name), ${name}' |
	            '${name} (${distance})' | '${name}' |
		    '${ref} (${distance})'| '${ref} (${description})' | '${ref}' |
		    '${description}'
	      }
}


(route=foot | route=hiking) & 
	(network=iwn | network=nwn | network=rwn | network=lwn) & osmc:symbol!=* {
	apply { set route_rest=
	            '$(route_rest), ${name} (${ref}/${distance})'|
	            '$(route_rest), ${name} (${ref})' |
	            '$(route_rest), ${name} (${distance})' |
	            '$(route_rest), ${name}' |
	            '$(route_rest), ${ref} (${distance})'|
	            '$(route_rest), ${ref}' |
	            '$(route_rest), ${distance}' |
	            '${name} (${ref}/${distance})'|
	            '${name} (${ref})' |
	            '${name} (${distance})' |
	            '${name}' |
	            '${ref} (${distance})'|
	            '${ref}' |
	            '${distance}'
	      }
}

route=running | route=fitness_trail {
	apply { set route_running=
	            '$(route_running), ${name} (${ref}/${distance})'|
	            '$(route_running), ${name} (${ref})' |
	            '$(route_running), ${name} (${distance})' |
	            '$(route_running), ${name}' |
	            '$(route_running), ${ref} (${distance})'|
	            '$(route_running), ${ref}' |
	            '$(route_running), ${distance}' |
	            '${name} (${ref}/${distance})'|
	            '${name} (${ref})' |
	            '${name} (${distance})' |
	            '${name}' |
	            '${ref} (${distance})'|
	            '${ref}' |
	            '${distance}'
	      }
}

network=greenway {
	apply { set route_greenway=
	            '$(route_greenway), ${name} (${ref}/${distance})'|
	            '$(route_greenway), ${name} (${ref})' |
	            '$(route_greenway), ${name} (${distance})' |
	            '$(route_greenway), ${name}' |
	            '$(route_greenway), ${ref} (${distance})'|
	            '$(route_greenway), ${ref}' |
	            '$(route_greenway), ${distance}' |
	            '${name} (${ref}/${distance})'|
	            '${name} (${ref})' |
	            '${name} (${distance})' |
	            '${name}' |
	            '${ref} (${distance})'|
	            '${ref}' |
	            '${distance}'
	      }
}

